Welcome
https://github.com/jagasia/empower2024
Jagadeeswaran
livesql.oracle.com

Oracle
	SQL
	PL/SQL
Frontend
Backend
	Database

sql developer
while installing oracle server, the follows users are created
	sys
	system
	hr
	scott
	
sys and system are dba	

Dr. E.F. Codd
	Relational Algebra

12 rules

Relation
Table
column	/	attribute
row	/	record	/tuple
data
null	is not a space/ is not zero

SQL
	ORACLE		isql
	MS SQL Server	t-sql

Structured Query Language
	DDL - Data Definition Language
	DML - Data Manipulation Language
	DQL - Data Query Language
	DCL - Data Control Language
	TCL - Transaction Control Language

DDL
	Data Definition Language
is used for defining data
by creating a table, what we define?
a row must follow this format

CREATE	-	creates the db object
ALTER	-	modifies the structure of the object
DROP	-	removes the db object
TRUNCATE -	removes all records of the table

Database objects
	Table
	View
	Index
	Synonyms
	Stored Procedures
	Triggers
	
DML
	INSERT	insert row into a table
	UPDATE	update row(s) in a table
	DELETE 	delete row(s) from a table

DQL
	SELECT
		data from 1 or more tables
DCL
	GRANT
	REVOKE
TCL
	COMMIT
	SAVEPOINT
	ROLLBACK

DDL
-------
CREATE TABLE statement

E-R diagram
	you identify Entities and their Relationships

Entities become table

CUSTOMER
-----------------
	ID	INT
	NAME	
	DOB
	PHONE
	ADDRESS
	
	
	
SALES
	ID
	CUSTOMERID
	PRODUCTID


Task
-------
identify the data types used in Oracle SQL

data type categories:-
Character
Numeric
Date
LOB
RAW and LONG RAW
ROWID and UROWID
XML (XMLTYPE)


https://blog.devart.com/oracle-data-types.html


CHAR
NCHAR
VARCHAR2
NUMERIC
NUMBER
INT
DATE
	DATE
	DATETIME
	TIMESTAMP
	TIMESTAMP WITH TIMEZONE
	YEAR TO MONTH
	HOUR TO MINUTE
https://docs.oracle.com/en/database/oracle/oracle-database/19/nlspg/datetime-data-types-and-time-zone-support.html#GUID-3A1B7AC6-2EDB-4DDC-9C9D-223D4C72AC74

BLOB
CLOB


CHAR vs VARCHAR
CHAR vs NCHAR

Observation:
create table EMP
(
    name CHAR(4)
);

INSERT INTO EMP VALUES('RAJA');
1 row inserted

INSERT INTO EMP VALUES('RAJAN');
ORA-12899: value too large for column "SQL_YXQXXPCFJBRANOZXAQAZPLDPW"."EMP"."NAME" (actual: 5, maximum: 4) ORA-06512: at "SYS.DBMS_SQL", line 1721

INSERT INTO EMP VALUES('123☺');
ORA-12899: value too large for column "SQL_YXQXXPCFJBRANOZXAQAZPLDPW"."EMP"."NAME" (actual: 6, maximum: 4) ORA-06512: at "SYS.DBMS_SQL", line 1721


DROP TABLE EMP;
Table dropped

create table EMP
(
    name NCHAR(4)
);

Table created


INSERT INTO EMP VALUES('123☺');
1 row(s) inserted

Conclusion:
NCHAR(4) allows 4 characters
CHAR(4) allows 4 bytes of characters

CREATE TABLE
(
	COL1 INT,
	COL2 CHAR(5),
	COL3 VARCHAR2(30)
);

Demo:
-----------
CUSTOMER
-----------------
	ID	INT
	NAME	VARCHAR2(100)
	DOB	DATE
	PHONE	varchar2(20)
	ADDRESS	varchar2(100)



CREATE TABLE CUSTOMER(
    ID INT,
    NAME VARCHAR(100),
    DOB DATE,
    PHONE VARCHAR2(20),
    ADDRESS VARCHAR2(100)
);
Table created



Task:
PRODUCT
	ID
	NAME
	MFG_DATE
	PRICE

Create a table using the information given above





INSERT INTO CUSTOMER VALUES
(1, 'Raja','01-Jan-00','989898998','India');


dd-MON-RR

RR is year format where,
00	is 2000 because, now it is 2024

TO_CHAR

INSERT INTO CUSTOMER VALUES
(2, 'Suresh',TO_DATE('01-Jan-1900','dd-MON-yyyy'),'989898997','India');


select id, name, TO_CHAR(dob,'dd-MON-yyyy'), phone, address from customer;


----------------------------
ALTER

is used to alter the structure of the table

ALTER
	adding a column to the existing table
	drop a column from a table
	rename a column
	modify the data type of the column

PRODUCT
	ID
	NAME
	MFG_DATE
	PRICE
in the product table,
1) add another column called "EXP_DATE
2) modify the data type of price to NUMBER(6,2)
3) remove the EXP_DATE column
4) rename a column from PRICE to COST


CREATE TABLE PRODUCT
(
    ID INT,
    NAME VARCHAR2(50),
    MFG_DATE DATE,
    PRICE INT
)

1) add another column called "EXP_DATE
ALTER TABLE PRODUCT ADD EXP_DATE DATE;
Table altered

2) modify the data type of price to NUMBER(6,2)
ALTER TABLE PRODUCT MODIFY PRICE NUMBER(6,2);
Table altered

3) remove the EXP_DATE column
ALTER TABLE PRODUCT DROP COLUMN EXP_DATE;
Table altered

4) rename a column from PRICE to COST
ALTER TABLE PRODUCT RENAME COLUMN PRICE TO COST;
Table altered




insert into product values (1, 'Pencil',sysdate, 11.0);
added

DDL
------
what we have learned so far
	CREATE TABLE
	ALTER TABLE
	DROP TABLE


DROP TABLE <<TABLENAME>>


TRUNCATE

TRUNCATE TABLE <<TABLENAME>>


CREATE TABLE EMP
AS
SELECT * FROM HR.EMPLOYEES;




SELECT * FROM EMP;

TRUNCATE TABLE EMP;
Table truncated.

select * from EMP;
no data found

-------------------------------------------------------
DML
-------
INSERT
UPDATE
DELETE

What are the different ways INSERT can be used?

INSERT INTO <<TABLENAME>> VALUES (VAL1, VAL2, ...);
	this is a common syntax
but in this syntax,
 we must supply the number of values equal to number of columns
	and also in the correct order

CREATE TABLE PRODUCT
(
    ID INT,
    NAME VARCHAR2(50),
    MFG_DATE DATE,
    PRICE INT
)

For this table, 
	INSERT INTO PRODUCT VALUES(11, 'Geometry Box', sysdate, 70);
MFG DATE is not known for a product
	INSERT INTO PRODUCT VALUES(12, 'Sharpner', NULL, 10);


INSERT INTO PRODUCT VALUES(13, 'Eraser', 10);
ORA-00947: not enough values 

now, we got error while ignoring a field, so we use another syntax, where we specify the list of columns to which we supply values.

INSERT INTO PRODUCT (ID, NAME, PRICE) VALUES (13, 'Pen', 10);
1 row(s) inserted

INSERT ALL
	is used to add multiple rows using a single statement.



INSERT ALL 
    INTO PRODUCT (ID, NAME, MFG_DATE, PRICE) VALUES (21, 'One Plus 12', sysdate, 69999)
 	INTO PRODUCT (ID, NAME, MFG_DATE, PRICE)  VALUES (22, 'Projector', '19-Aug-24', 50000)
SELECT * FROM DUAL;



INSERT ALL 
    INTO PRODUCT  VALUES (21, 'One Plus 12', sysdate, 69999)
 INTO PRODUCT  VALUES (22, 'Projector', '19-Aug-24', 50000)
SELECT * FROM DUAL;





INSERT INTO PRODUCT1
SELECT * FROM PRODUCT;

INSERT
UPDATE
DELETE

UPDATE
-------------
UPDATE <<TABLENAME>> SET <<COLNAME1>>=<<VALUE>>,
			<<COLNAME2>>=<<VALUE>>,.......
			[WHERE <<CONDITION>>]


UPDATE the price of all products as price +price * 0.1



update product set price=price+price*.1;
7 rows affected

now, use WHERE clause to specify a condition so that, only those rows that meets this condition are updated


update product set price=price+price*.1
    WHERE MOD(ID,2)=0;
3 rows affected

update product set price=price+price*.1
	WHERE NAME='Projector';

	
UPDATE PRODUCT SET NAME='Marker Pen', MFG_DATE=SYSDATE, PRICE=20 
WHERE ID=13;
1 row updated


DELETE
-------------
DELETE [FROM] <<TABLENAME>>;

Ex:
	DELETE FROM PRODUCT;
	or
	DELETE PRODUCT;

in both above statements, there is no condition. So, all rows are deleted.

DELETE FROM PRODUCT WHERE ID=13;
1 row deleted


DELETE allows us to specify a condition so that only those rows meeting the condition are removed
TRUNCATE does not allow us to specify condition, so it always remove all rows.

DELETE can be rolled back.
TRUNCATE cannot be rolled back.

DML statements can be rolled back.

rollback reverts the changes done (which are yet to be committed).

DML
	insert
	update
	delete

TCL
-----
	Transaction Control Language
		COMMIT
		SAVEPOINT
		ROLLBACK
What is a transaction?
	a transaction is a set of statements executed together as a single unit.
	if transaction is successful, then all the statements are executed successfully.
	if transaction is failure, then all statements are rolled back.

a batch execution can be considered as a transaction, if it posses
	ACID 
Atomicity
	All otherwise None
Consistency
	transaction should leave the data in a consistent state, no matter, the transcation is 
		successful or failure
Isolation
	lock
Durability
	log



statement1
savepoint s1;
statement2
savepoint s2;
statement3
rollback s2;		//
commit;			statement1 and 2 are committed

-------------------------------------
DCL
------
	Data Control Language

GRANT
REVOKE

In oracle, the privileges are categorized into
	System privileges
	Object privileges

System privileges 
	are used to login, logout, create objects, etc
	GRANT with admin option
Object privileges
	are specific to particular object
	like INSERT ON EMPLOYEES table

	GRANT with grant option

Activity:
	Identify the system privileges in oracle and the effect of WITH ADMIN OPTION
	Identify the object privileges in oracle

CREATE USER gagan
    IDENTIFIED BY gagan 
    DEFAULT TABLESPACE example 
    QUOTA 10M ON example 
    TEMPORARY TABLESPACE temp
    QUOTA 5M ON system 
    PROFILE app_user 
    PASSWORD EXPIRE;


https://docs.oracle.com/database/timesten-18.1/TTSQL/privileges.htm#BABECGGB
-------------------------------------------------------

--GRANT SELECT ON HR.DEPARTMENTS TO JAG;

--CREATE USER gagan IDENTIFIED BY gagan;

--GRANT CREATE SESSION TO gagan;

--REVOKE CREATE SESSION FROM gagan;
--revoke create session from jag;

--GRANT SELECT ON HR.EMPLOYEES TO JAG WITH GRANT OPTION;
--revoke SELECT ON HR.EMPLOYEES FROM JAG;

--GRANT CREATE SESSION TO JAG WITH ADMIN OPTION;

REVOKE CREATE SESSION FROM JAG;

--------------------------------
CONSTRAINTS
	Limitations
	Restrictions
	Conditions that needs to be met
	
constraints enforce integrity

Integrity
-------------
	means correctness

types of data integrity?
	Entity Integrity
	Domain Integrity
	Referential Integrity
	User defined data integrity

What is entity integrity?
	is the ability to identify a row uniquely
	is implemented using PRIMARY KEY

what is a primary key?
	a column or columns which is/are used to identify a row uniquely is a primary key
	primary key column(s) will not allow
		NULL
		Duplicates

	primary key can be composite also

We can add primary key 
	while creating a table		CREATE
	after creating a table		ALTER


PRIMARY KEY WHILE CREATE TABLE 
	at column level
	at row level
	and we can also mention constraint id while creating a constraint. It will be useful while removing the constraint
	if we do not name the constraint id, then system gives an id. we can find that id and use it to remove the constraint

CREATE TABLE PRODUCT
(
	ID INT PRIMARY KEY,
	NAME VARCHAR2(20),
	PRICE NUMBER(6,2)
);
Table created

DROP TABLE PRODUCT;
Table dropped.


CREATE TABLE PRODUCT
(
	ID INT,
	NAME VARCHAR2(20),
	PRICE NUMBER(6,2),
	PRIMARY KEY(ID)
);
Table created.

drop table product;
table dropped.

CREATE TABLE PRODUCT
(
	ID INT,
	NAME VARCHAR2(20),
	PRICE NUMBER(6,2),
	CONSTRAINT pkId1 PRIMARY KEY(ID)
);
Table created.

i will show you, how to remove this constraint.
before that, lets see the effect of this constraint.

we add 2 rows and see the effect of primary key
INSERT INTO PRODUCT VALUES(NULL, 'Pen',10);
ORA-01400: cannot insert NULL into ("SQL_XAILRSLZDFLQFNZSHSKOOEJMB"."PRODUCT"."ID") ORA-06512: at "SYS.DBMS_SQL", line 1721

select * from product;
no data found

INSERT INTO PRODUCT VALUES(1, 'Pen',10);
1 row(s) inserted

INSERT INTO PRODUCT VALUES(1, 'Pencil',5);
ORA-00001: unique constraint (SQL_XAILRSLZDFLQFNZSHSKOOEJMB.PKID1) violated ORA-06512: at "SYS.DBMS_SQL", line 1721

Remove primary key constraint from the PRODUCT table:
ALTER TABLE PRODUCT DROP CONSTRAINT pkId1;
Table altered

How to find the constraint name by table name?
SELECT * FROM USER_CONS_COLUMNS WHERE TABLE_NAME='PRODUCT';

now, lets check effect of this:

ALTER TABLE PRODUCT DROP PRIMARY KEY;

Alter table and add primary key now.

ALTER TABLE PRODUCT ADD CONSTRAINT pkpid1 PRIMARY KEY(ID);
ORA-01449: column contains NULL values; cannot alter to NOT NULL 


Now, 
DELETE FROM PRODUCT WHERE ID IS NULL;
1 row(s) deleted.


ALTER TABLE PRODUCT ADD CONSTRAINT pkpid1 PRIMARY KEY(ID);
ORA-02437: cannot validate (SQL_XAILRSLZDFLQFNZSHSKOOEJMB.PKPID1) - primary key violated 

DELETE FROM PRODUCT WHERE NAME='Pen'
1 row(s) delete.

ALTER TABLE PRODUCT ADD CONSTRAINT pkpid1 PRIMARY KEY(ID);
Table altered.

Task:
1) create a table and introduce primary key at column level
2) drop the table and create again and introduce primary key at table level
3) create primary key with constraint id of your choice and check data dictionary
4) alter table and drop constraint primary key
5) alter table and add primary key

dictionary tables can be
	USER_
	ALL_
	DBA_

USER_TABLES
USER_VIEWS
USER_CONSTRAINTS
USER_CONS_COLUMNS

These are some of the dictionary tables, 
	use SELECT statement on these tables
	like
		SELECT * FROM USER_TABLES;
---------------------------------------------------------
ALTER TABLE PRODUCT ADD CONSTRAINT pkpid1 PRIMARY KEY(ID, PID);
This way, we can create composite primary key

Every primary key uses a clustered index

------------------------------
DEFAULT
CHECK
NOT NULL
UNIQUE


CREATE TABLE TABLE1
(
    NAME VARCHAR2(20) UNIQUE
);
Table created.

INSERT INTO TABLE1 VALUES(NULL);


CREATE TABLE TABLE1
(
    NAME VARCHAR2(20) NOT NULL
);
Table created.

insert into table1 values (null);
ORA-01400: cannot insert NULL into ("SQL_XAILRSLZDFLQFNZSHSKOOEJMB"."TABLE1"."NAME") ORA-06512: at "SYS.DBMS_SQL", line 1721


CHECK
----------
DROP TABLE TABLE1;
Table dropped

create table table1
(
    price int CHECK (price>100)
);
Table created

insert into table1 values(10);
ORA-02290: check constraint (SQL_XAILRSLZDFLQFNZSHSKOOEJMB.SYS_C00164433864) violated ORA-06512: at "SYS.DBMS_SQL", line 1721

insert into table1 values(101);
1 row(s) inserted.

DEFAULT
----------------
some columns can have default values
when user does not provide value for these columns, the default value can be taken


create table EMP
(
    ID INT,
    NAME VARCHAR2(20),
    NATIONALITY VARCHAR2(20) DEFAULT 'INDIAN'
)
Table created.


INSERT INTO EMP VALUES (1, 'Jag', DEFAULT);
1 row inserted

INSERT INTO EMP (ID, NAME) VALUES (2, 'Nitin');
1 row inserted

insert into emp values (3, 'Satish', 'USA');
1 row inserted

--------------------
Activity:
Identify what is FOREIGN KEY and how to use it

FOREIGN KEY enforces referential integrity.

example:
	PRODUCT table contains product id as follows
	1
	2
	3
	4
	5


	SALES
	ID, PID, CID,...
in sales table, PID cannot be 6 or 7 or 8 
only the ids present in PRODUCT.ID are allowed in SALES table PID


what are the foreign key constraints?
	RESTRICT
	SET NULL
	CASCADE



