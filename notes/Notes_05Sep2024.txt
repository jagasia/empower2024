Spring MVC
What is MVC
	Model
		any code that 
			defines data
			access data
	View
		any code that
			gets input
			gives output
	Controller
		allows views from anywhere
		to access model
		and controller can also provide business logic	(middle tier)
Steps: for spring boot mvc
 --------------------------------
1) Create a spring boot project
	05-sep-mvc-1

2) dependencies:
	spring web

3) generated the project and
	unzip
	move to workspace folder

4) import as existing maven project

5) check with a hello world in main

MVC steps:
-------------
1) in application.properites:
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp

	server.port=5001

2) we mentioned the prefix, but actually, this folder is not there, 
	we should create that inside "webapp" folder		src/main

3) we created the folder as per prefix location
	now, create the jsp files there only

4) create the controller classes 
	either inside the base package
	or its sub package

what is base package?
	the package that contains the Application class




Error:
------
2024-09-05T10:01:35.173+05:30  WARN 3324 --- [05-sep-mvc-1] [nio-5001-exec-1] o.s.w.s.r.ResourceHttpRequestHandler     : "Path with "WEB-INF" or "META-INF": [WEB-INF/views/index.jsp]"



Solution:
-----------
in pom.xml
add apache tomcat embed jasper dependency.


---------------------------------------------------------------------
We have used spring jdbc in our spring core projects.

We will use Spring data JPA in spring boot projects

JPA
	Java Persistence Api

entity class name is Product
table name is PRODUCT

entity class name is ContractEmployee
table name s CONTRACT_EMPLOYEE




-----------------------------------------------------------
demo for spring boot mvc with JPA
-------------------------------------------
1) create a spring boot project 

	spring web
	spring data jpa
	ojdbc

2) application.properties
spring.application.name=05-sep-product-mvc-jpa

server.port=5001

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=hr
spring.datasource.password=hr

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.OracleDialect
spring.jpa.properties.hibernate.id.new_generator_mappings = false
spring.jpa.properties.hibernate.format_sql = false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.jpa.properties.hibernate.show_sql=true



3) entity:
	Product
package com.empower.demo.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
//@Table(name = "PRD")
public class Product {
	@Id			//the following field is the primary key
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
//	@Column(name = "product_name")
	private String name;
	private String description;
	private Double price;
	
	public Product() {}

	public Product(Integer id, String name, String description, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", description=" + description + ", price=" + price + "]";
	}
	
	
}

4) ProductRepository
package com.empower.demo.model;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer>
{	
	
}


5) 