c programming functions

we can 
	define functions
	call functions

this is normal in any language.
but in c language, it is top down scanning
so any functions defined below cannot be called from above.

sometimes, we declare the functions above to make it accessible from anywhere
/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void fn1();


int main()
{
    
    fn1();

    return 0;
}

void fn1()
{
    printf("Hi this fn1 function");
}




------------------
/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void fn1();


int main()
{
    
    fn1();
    fn1();
    fn1();
    

    return 0;
}

void fn1()
{
    int count=0;
    printf("count=%d\n",count++);
}

-------------------------------------

/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void fn1();


int main()
{
    
    fn1();
    fn1();
    fn1();
    

    return 0;
}

void fn1()
{
    static int count=0;
    printf("count=%d\n",count++);
}


------------------------------------------
all of you understand what is static??
	static means persistent in c, c++
	means a variable can retain its value across several function calls.

-----------------------
functions can have 
	arguments / parameters
	return type

arguments can be 
	value type	
	reference type

functions can return reference also


ARRAYS are always passed by reference



in java, (also in c#, vb.net, reactjs)
	param array










/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void fn1();


int main()
{
    
    int input[10];
    input[0]=1;
    fn1(input);         //here, input array's name is passed as argument. array name is a pointer to first of the array

    printf("%d",input[0]);
    return 0;
}

void fn1(int arr[])
{
    arr[0]=2000;
}
-----------------------------------

functions can be called byVal or byRef
arrays are always by ref


in c language, function overloading is not possible

/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void fn1();

int sumInt(int i, int j)
{
    return i+j;
}

float sumFloat(float i, float j)
{
    return i+j;
}

int main()
{
    
    int input[10];
    input[0]=1;
    fn1(input);         //here, input array's name is passed as argument. array name is a pointer to first of the array

    printf("%d",input[0]);
    return 0;
}

void fn1(int arr[])
{
    arr[0]=2000;
}



----------------------
Recursion
	a function calls itself

------------------------
structure
----------
 is used to create user defined types in c (and c++) language

struct Address
{
}



/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

struct Address
{
    char *doorNo;
    char *city;
    int pincode;
    char *state;
};

int main()
{
    struct Address add;
    add.doorNo="A451";
    add.city="Bengaluru";
    add.pincode=501103;
    add.state="Karnataka";
    printf("%s %s %d %s",add.doorNo, add.city, add.pincode, add.state);
    return 0;
}


Task:
-----

Create a c program and accept employee details, store them in the structure

create a function that accepts employee details and print them.

modify the values of employees inside the function

and observe that in main method, the employee details are not affected by the function.



/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

struct Address
{
    char *doorNo;
    char *city;
    int pincode;
    char *state;
};

struct Date
{
    int day;
    char *month;
    int year;
};

int main()
{
    struct Address add;
    add.doorNo="A451";
    add.city="Bengaluru";
    add.pincode=501103;
    add.state="Karnataka";
    // printf("%s %s %d %s",add.doorNo, add.city, add.pincode, add.state);
    
    struct Date dt;
    dt.day=13;
    dt.month="Sep";
    dt.year=2024;
    printf("%d-%s-%d",dt.day, dt.month, dt.year);
    
    return 0;
}


===============================================
===============================================
#include <stdio.h>

struct Address
{
    char *doorNo;
    char *city;
    int pincode;
    char *state;
};

struct Date
{
    int day;
    char *month;
    int year;
};

struct Employee
{
    int id;
    char *name;
    struct Date dob;
    struct Address address;
};

int main()
{
    struct Address add;
    add.doorNo="A451";
    add.city="Bengaluru";
    add.pincode=501103;
    add.state="Karnataka";
    // printf("%s %s %d %s",add.doorNo, add.city, add.pincode, add.state);
    
    struct Date dt;
    dt.day=13;
    dt.month="Sep";
    dt.year=2024;
    // printf("%d-%s-%d",dt.day, dt.month, dt.year);
    
    struct Employee emp;
    emp.id=123;
    emp.name="Raja";
    emp.dob=dt;
    emp.address=add;
    
    printf("Id:%d\nName:%s\nDob:%d-%s-%d\nAddress:%s %s %d %s\n",emp.id, emp.name,emp.dob.day, emp.dob.month, emp.dob.year, emp.address.doorNo, emp.address.city, emp.address.pincode, emp.address.state);
    
    return 0;
}
=============================
Files

Already you know file handling in java language.
lets do in c language

File is in storage
we need to represent it as an object in memory

FILE *fptr;		this pointer is capable of representing a file in memory

fopen()			open => loading the file in memory

fclose()			remove the file from memory

all the read/write/append operations we do on the memory and 
flush the changes to the storage using

fflush()


/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int main()
{
// 	FILE *fptr=fopen("file1.txt","w");
// 	char *str="Hello";
// 	fprintf(fptr,"%s",str);
// 	fclose(fptr);

	FILE *fptr=fopen("file1.txt","r");
	char str[100];
	// char *str2;
	while(fscanf(fptr, "%s", str)==1)
	{
		printf("%s ",str);
	}
	return 0;
}



----------------------
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int main()
{
    FILE *fptr;
    fptr=fopen("file2.txt","w");
    int dno=123;
    char *street="Brigade road";
    
    fprintf(fptr,"%d %s",dno, street);
    fflush(fptr);
    printf("Done");
	return 0;
}








-------------------
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int main()
{
    printf("Done");
    FILE *fptr;
    fptr=fopen("file2.txt","r");
    int dno;
    printf("Done");
    char street[100];
    char word[100];
    
    printf("Done");
    fscanf(fptr,"%d",&dno);
    fscanf(fptr,"%s %s",street, word);
    
    
  printf("Done");
    printf("THe content from the file was %d %s %s\n",dno, street, word);
//     printf("Done");
	return 0;
}



-------------------------
write objects to a file:

/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

struct Employee
{
    int id;
    char *name;
    float salary;
};

int main()
{
    struct Employee emp;
    emp.id=1;
    emp.name="Raja";
    emp.salary=1234567.0;
    
    FILE *fptr;
    fptr=fopen("emp.dat","a");
    
    fwrite(&emp, sizeof(emp), 1, fptr);
    
    printf("Done");
	return 0;
}




----------------------------------------
read object from a file
--------------------------



https://www.geeksforgeeks.org/read-write-structure-from-to-a-file-in-c/


----------------------------------------------------------
HTML
------
	Hypertext Markup Language


markup languages like
	html, xml are based on SGML		(Standard Generalized Markup Language)


Lets understand the grammer of a markup language

1) elements
2) attributes
3) comments
4) entities
5) processing instruction


Element
-----------
is also called as Tag

ex:
	<HTML>	is the root element of a html file

there must be only 1 root element in any markup language code
An element that contains all other elements is "root" element

<HTML>

</HTML>

Tag is called as element
there are different types of tags:
	1) empty tag
		ex:		<br/>		<hr/>		
	2) content tag
		ex:		<body></body>	<p></p>

		i) container / block elements that can contain other elements inside as child
		ex:
			<div>	<p> this is paragraph</p>	<div>	</div>	</div>


		ii) inline elements
			they appear in the line of parent element

			ex:	<span> 	</span>


Attributes:
------------
provide additional input to the element
ex:
	<p align="right"></p>

attribute values must always be in "" only


Comments:
-------------
<!-- <span>this is span</span> -->


Entities:
---------
	&nbsp;
	&gt;
	&lt;
	&ge;
	&le;
	&eq;
	&ne;

HTML 
	has a root <HTML>
	and this <HTML> tag can contain
		<HEAD>
	and	<BODY>


the code in <HEAD> tag are loaded in memory, even before the page is rendered
any scripts, you want to be ready should be used in head
though scripts are allowed in body also

Inside HEAD
	TITLE
	

the following tags:

HEADINGS
	H1 to H6			
	H1 being the largest and
	H6 being the smallest

TABLE tags
FORM INPUTS	(html5 tags like 		number, date, email, range)



1) headings
2) lists
3) table
4) form inputs
-------------------------------------------
unordered list
-----------------

<ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>  

<ul style="list-style-type:disc;">
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>  




ordered list
-----------------
<ol>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>  



<ol start="50">
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>

<ol type="I" start="50">
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>

-------------------------
What is CSS?
	Cascading Style Sheet


there are 3 ways, css can be applied to html elements
	i) 	inline
	ii)	internal
	iii)	external


inline
------
	in the line of the html element, the style is applied using style "attribute"

ex:
	<p style="color:red"> this is a paragraph</p>

internal
----------
	we use <style> element
	and whatever style we mention, are applied to the entire html document (current page)

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        p{
            color:red
        }
    </style>
</head>
<body>
    <p>One</p>      <p>Two</p>      <p>Three</p>
</body>
</html>



external
---------
we will create separate css file and apply it in html document using
	<link> element




Selectors:
------------

p
{
	color:red
}


in above example, we used "element" selector


#p2
{
    color:chocolate
}

in above example, we used "id" selector



.even
{
    color:chartreuse
}

in above example, we use "class" selector

sometimes, for a single element, 
	we may use external style	
	we may use internal
	we may use inline
	we may use by id selector
	we may use by class selector

what will be applied?
	
external < internal < id selector < inline


Task:
learn the selectors used in css
--------------------------------------------------

How to use shorthand property
------------------------------------
background
color types
	name
	hexa decimal code
	rgba
-------------------------------


background-color
background-image
background-repeat
background-attachment
background-position

compare

body {
  background-color: #ffffff;
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}

with

body {
  background: #ffffff url("img_tree.png") no-repeat right top;
}




styling on event

:click

:focus

-------------------------------------------
Bootstrap
-----------
typography
	as soon as we apply bootstrap to a page, the default style is applied on all elements of the page



Bootstrap treats a page as 12 columns

we can span some columns and make necessary number of columns as requires



colors
alerts
tables
images


cards		



