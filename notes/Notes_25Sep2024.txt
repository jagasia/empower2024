We learned to create a docker image of our spring boot application
spring boot + oracle

we need to run 2 docker containers at a time that can interact with each other
that is possible only if both containers run in same network

there are 2 ways we can do that
	i) we can create a docker network
		and run both docker images in same network	
	ii) docker compose
		docker_compose.yml
			we specify what are the services
				

https://dassiorleando.medium.com/docker-compose-springboot-mysql-41266290eef8




	systemctl start docker
First lets create a network named user-mysql
	docker network create user-mysql

check the networks:
	docker network ls


We will use the image provided by dockerhub to run as container. Also we will specify following when running the container
a. name of the mysql container
a. What should be the password for MYSQL
b. We want to create the Database named bootdb.
c. specify the network user-mysql on which this container should be created.
d. start the container in detached mode.


docker container run --name mysqldb --network user-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=t3 -d mysql:8


Next let us check if container has started correctly using logs command.
	docker container logs -f mysqldb

Using the exec command we can also inspect if the database named t3 is created successfully.
	docker container exec -it mysqldb bash

Now, login to mysql using username and password 
	mysql -uroot -proot

	show databases;

Next we will modify the application.properties in the Spring Boot application to make use of the mysql container name i.e.	mysqldb instead of localhost
spring.datasource.url=jdbc:mysql://<<mysql container name. in this demo it is mysqldb>>/t3
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.platform=mysql
spring.datasource.initialization-mode=always


create the docker file:
From openjdk:8
copy ./target/employee-jdbc-0.0.1-SNAPSHOT.jar employee-jdbc-0.0.1-SNAPSHOT.jar
CMD ["java","-jar","employee-jdbc-0.0.1-SNAPSHOT.jar"]


build the docker image:
	docker image build -t user-service .

Next run this as a container. Also we are running the container on the employee-mysql network.
	docker container run --network user-mysql --name user-service-container -p 8080:8080 -d user-service

	docker ps



docker network rm networkid


clean install -Dmaven.test.skip=true

https://www.javainuse.com/devOps/docker/docker-mysql


------------------------------------------------------------
mvn spring-boot:build-image



-----------------------------------------
Jenkins
----------
lab setup
	download jenkins.war

to start jenkins:-
	java -jar jenkins.war --enable-future-java

now go to
	localhost:8080





for download and install jenkins in windows OS:
	https://www.jenkins.io/download/#downloading-jenkins

if you have download war file: follow this:
https://dzone.com/articles/how-to-install-jenkins-with-a-war-file

after downloading jenkins.war file, 
	go to cmd (where .war is present)
		java -jar jenkins.war

	if 8080 is not available, you can find PID of the process which occupies 8080 using:
		netstat -aon
	end task that process and  try again



How to Create a New Build Job in Jenkins
	https://www.guru99.com/create-builds-jenkins-freestyle-project.html

	https://github.com/kriru/firstJava


For running jenkins using java versions above 8 or 11:
	java -jar jenkins.war --enable-future-java

----------------------------------------------------------------------------------
C:\Program Files\Java\jdk-11.0.1\conf\security\java.security

find and append TLSv1.3 for jdk.tls.disabledAlgorithms:
jdk.tls.disabledAlgorithms=SSLv3, RC4, DES, MD5withRSA, DH keySize < 1024, \
    EC keySize < 224, 3DES_EDE_CBC, TLSv1.3

Normally, it is restricted. so 

open cmd as administrator
got to
cd C:\Program Files\Java\jdk-11.0.1\conf\security

notepad java.security
do the updation and save and exit
----------------------------


"/swagger-ui/**","/swagger-resources/*","/v3/api-docs/**"
