What is Spring, Spring Core(Dependancy Injection, Inversion of Control
---------------------------------
We need to understand what is bean?
	a java bean
		is a java code that is re-usable
		is independent of the type of project (console, web, windows, web service)
		that code must not contain something specific to a particular type of project
			System.out.println, Scanner are useful for console applications only
	ideally a java bean has class, methods, properties, thats all

EJB	Enterprise Java Beans
EJB provided the following services for beans

	scalability	- ability of the application/ component to adapt to increasing or decreasing needs/req
		i subscribe for 50 gb airtel data when i have a need
		next month i subscribe only 10 gb
		next month i may not even subscribe data
	
		with the given infra, if you are able to adapt to changing requirement
	elasticity
		ablility to provision more or infra, to scale

there will be something called as "Container"
	container is a special jvm
		it provided generic services viz.


scalability, life cycle management
persistence, transaction management
security

EJB was considered as winter season for programmers
the simplified version of ejb was introduced as
Spring season for programmers


Spring provides env for programmers, that they can use beans as POJO classes

EJB interfaces forced the beans to implement
	ejbCreate()
	ejbDestroy()
	ejbActivate()
	ejbPassivate()

A bean management system is expected to handle
	the life cycle of the bean



generic services are common requirements for any application. They are provided by the Container
application specific services are to be focused by the bean developer


configuration system in spring f/w:
	i) xml based configuration
	ii) annotation based configuration


Spring modules:
------------------
	Core Container	
		heart of the spring fw. 
		implementation for IOC
		support for DI
		maintain objects life cycle

	Data Access/Integration
		JDBC
		ORM
		JMS		
		Transaction
	Web
		MVC

	AOP
		Cross-cutting concerns like transactions, logging, security, etc
	Instrumentation
	Testing
		junit, mock

	REST
		restful webservices


Core:
-------
learn how to configure a java bean?
	using xml

Dependency Injection
Autowiring

We have done dependency injection using
	Constructor
	Setter

Remember, when you created a College class
	you had
		constructor without argument
			that allows users to create an object 
			and then use setter methods to inject the dependent values

		constructor with argument
			that allows users to create an object and inject values there itself


DI is used whenever 2 classes have
	Composition		(A has B and B cannot exist independently)
	Aggregation		(A and B can exist independently and A has B)

relationship

A has B
Car has Audio

How to you do this DI in spring framework using xml configuration?

Spring framework uses lot of .jar files
so it is difficult to manage

Maven is a project build tool, that effectively manages the .jar files

in a normal project, if you add jar, the project size is huge
in a maven project, the jar files are not part of the project, only the dependent jar files are mentioned in the config file, so when you pull the project to your computer, your maven will download, if not available

So lets first create a maven project and execute in our system.
Demo:
--------
i am creating a maven project of
	quick start archetype

	group id can be same as package name
	artifact id is the name of the project

once we created a project, we have
	App.java

that prints Hello World

Run the project as java application

Did you notice that whenever we create a maven project,
a pom.xml file is being created

Project Object Model



Demo:
-------
i will create a Mathematics class and inject
no1 and no2 using 
	setter
	constructor

based injection in xml configuration.



All my spring demos will be in "Spring" folder and not java folder



i) create a maven project of quickstart arche type
ii) 	group:	com.empower.demo
	artifact:	02-sep-spring-1
iii) go to pom.xml and add the following spring dependencies:

	  <dependency>
	  	<groupId>org.springframework</groupId>
	  	<artifactId>spring-context</artifactId>
	  	<version>6.1.11</version>
	  </dependency>
	  
	  <dependency>
	  	<groupId>org.springframework</groupId>
	  	<artifactId


	

1) i will create a Mathematics class with following properties:
	no1
	no2
	result

2) a method 
	add()
		that will update the result=no1+no2;





package com.empower.demo;

public class Mathematics {
	private Integer no1;
	private Integer no2;
	private Integer result;
	
	public Mathematics() {}

	public Mathematics(Integer no1, Integer no2, Integer result) {
		super();
		this.no1 = no1;
		this.no2 = no2;
		this.result = result;
	}

	public Integer getNo1() {
		return no1;
	}

	public void setNo1(Integer no1) {
		this.no1 = no1;
	}

	public Integer getNo2() {
		return no2;
	}

	public void setNo2(Integer no2) {
		this.no2 = no2;
	}

	public Integer getResult() {
		return result;
	}

	public void setResult(Integer result) {
		this.result = result;
	}
	
	public void add()
	{
		result=no1+no2;
	}
}





xml configuration file
	name can be
		appConfig.xml
		applicationConfig.xml
		spring.xml
		bean.xml

any name can be used for xml file
but the file must be present directly inside
	src/main/java folder
		not inside any package



<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:p = "http://www.springframework.org/schema/p"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
   
   
<bean name="maths" class="com.empower.demo.Mathematics">
		<property name="no1" value="5" />
		<property name="no2" value="4" />
		<!-- <constructor-arg name="no1" value="8" />
		<constructor-arg name="no2" value="5" /> -->
		
	</bean> 
   
   
</beans>


--------------------------------------
if you use <property> tag, then you are using 
	setter based injection

if you use <constructor-arg> tag, then you are using
	constructor based injection


Test the code in App.java



Task:
-------

Create an Employee bean with following properties
	id
	name
	address

configure xml file and inject following values for the properties
	121
	Raja
	Bengaluru

in App.java
	getBean of employee and display the values of properties


----------------------------------------------------------------------------------
Two methods of dependency injections:
	constructor based DI
	setter based DI

what is IOC?
	Inversion of Control



interface Audio
{
	void play();
}

class Sony implements Audio
{
	public void play()
	{
		System.out.println("Sony makes good sound");
	}
}

class Jbl implements Audio
{
	public void play()
	{
		System.out.println("Jbl sounds nice");
	}
}

class Car
{
	Sony sony;	//tightly coupled
}



//suppose, car provides a provision for audio

class Car
{
	Audio audio;	//now we can inject either Sony or Jbl here
			//this is called as loosely coupled
}







getBean() gets an instance of bean from IOC container

-----------------------------
Demo:
--------
package com.empower.demo;

public interface Audio {
	void play();
}




package com.empower.demo;

public class Sony implements Audio
{

	@Override
	public void play() {
		System.out.println("Sony makes good sound");		
	}

}





package com.empower.demo;

public class Jbl implements Audio {

	@Override
	public void play() {
		System.out.println("Jbl music is nice");
	}

}



package com.empower.demo;

public class Car {
	private Audio audio;		//loose coupled because, either Sony/ Jbl can be injected

	public Car() {}

	public Car(Audio audio) {
		super();
		this.audio = audio;
	}

	public Audio getAudio() {
		return audio;
	}

	public void setAudio(Audio audio) {
		this.audio = audio;
	}
	
	public void playMusic()
	{
		audio.play();
	}
}





<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean name="maths" class="com.empower.demo.Mathematics">
		<property name="no1" value="5" />
		<property name="no2" value="4" />
		<!-- <constructor-arg name="no1" value="8" /> <constructor-arg name="no2" 
			value="5" /> -->
	</bean>

	<bean name="sony" class="com.empower.demo.Sony">
	</bean>

	<bean name="jbl" class="com.empower.demo.Jbl">
	</bean>

	<bean id="car" class="com.empower.demo.Car">
		<property name="audio" ref="jbl" />
	</bean>

</beans>











package com.empower.demo;

import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
//    	Mathematics maths= (Mathematics) ctx.getBean("maths");
//    	maths.add();
//    	System.out.println(maths.getResult());
//        System.out.println( "Hello World!" );
    	
    	
//    	Car car=(Car) ctx.getBean("car");
    	Car car=ctx.getBean(Car.class);
    	car.playMusic();
    	
    }
}



-----------------------------------------------------
Autowiring
------------
so far, we have injected the dependencies 
instead of manually injecting the dependencies, 
we can choose the bean to autowire the dependency that is found


Autowire
	byType
	byName


byType
	Car has a dependency of type Audio
	so when we use byType autowiring, 
		any implementation of Audio will be eligible to inject

But when our configuration has more than 1 implementation of Audio
	Sony
	Jbl

we get error because, spring IOC Container does not know which implementation of Audio must be injected 
	expected single matching bean but found 2: sony,jbl

such situations, 
	byName can help


when multiple implementations are matching,
	every bean have a different name
	so use byName there



<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean name="maths" class="com.empower.demo.Mathematics">
		<property name="no1" value="5" />
		<property name="no2" value="4" />
		<!-- <constructor-arg name="no1" value="8" /> <constructor-arg name="no2" 
			value="5" /> -->
	</bean>

	<bean name="sony" class="com.empower.demo.Sony">
	</bean>

	<bean name="audio" class="com.empower.demo.Jbl">
	</bean>

	<bean id="car" class="com.empower.demo.Car" autowire="byName">
		
	</bean>

</beans>

---------------------------------------------------------------------------
Spring configuration using annotations
----------------------------------------------
same dependencies in pom.xml
	spring-context
	spring-context-support

instead of xml configuration, we are going to use annotations
	to mark a class as a bean, we have 2 options in annotation:
		i) @Component
		ii) @Bean

@Component
	is used above the class definition

sometimes, we want to mark a predefined class as a bean
in that case, we will use 

@Bean
	is used above a method that returns object of a bean

Ideally, whenever we use annotation based configuration 
	we can create a configuration class




 
package com.empower.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com")
public class MyConfig {

	
	@Bean
	public Jbl jbl()
	{
		return new Jbl();
	}
}






package com.empower.demo;

public interface Audio {
	void play();
}



package com.empower.demo;

import org.springframework.stereotype.Component;

@Component
public class Sony implements Audio
{

	@Override
	public void play() {
		System.out.println("Sony makes good sound");
	}

}




package com.empower.demo;

//@Component("jbl")		becomes bean defined in Myconfig class
public class Jbl implements Audio
{

	@Override
	public void play() {
		System.out.println("Jbl sounds nice");
	}

}






package com.empower.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class Car {
	@Autowired
	@Qualifier("jbl")
	Audio audio;
	
	public Car() {}

	public Car(Audio audio) {
		super();
		this.audio = audio;
	}

	public Audio getAudio() {
		return audio;
	}

	public void setAudio(Audio audio) {
		this.audio = audio;
	}
	
	public void playMusic()
	{
		audio.play();
	}
}



package com.empower.demo;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(MyConfig.class);
//    	ctx.scan("com");
//    	ctx.refresh();
    	Car car = ctx.getBean(Car.class);
    	car.playMusic();
        System.out.println( "Hello World!" );
    }
}


-----------------------------------------------------------------------------
Task:
--------
Do the spring project with annotation based configuration by yourself.
---------------------------------------------------------------------------------
What is the status of completion of the task?

Why nobody is the doing the task i have given today?


Those who have not done the tasks given,
	immediately start now

Create a bean and get bean from ioc container
Create loosely coupled dependency injection 

IOC
	This is called as inversion of control 
	because, the consumer is allowed to choose
	the implementation of audio while buying the car


spring container is called as IOC container.






-----------------------
using p namespace
----------------------


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean name="maths" class="com.empower.demo.Mathematics" p:no1="51" p:no2="41">
	</bean>

</beans>


How can we configure list of dependencies


Demo:
A Book has list of Authors

package com.empower.demo;

public class Author {
	private Integer id;
	private String name;
	
	public Author() {}

	public Author(Integer id, String name) {
		super();
		this.id = id;
		this.name = name;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Author [id=" + id + ", name=" + name + "]";
	}
	
	
}


package com.empower.demo;

import java.util.List;

public class Book {
	private Integer id;
	private String title;
	private List<Author> authors;
	
	public Book() {}

	public Book(Integer id, String title, List<Author> authors) {
		super();
		this.id = id;
		this.title = title;
		this.authors = authors;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public List<Author> getAuthors() {
		return authors;
	}

	public void setAuthors(List<Author> authors) {
		this.authors = authors;
	}

	@Override
	public String toString() {
		return "Book [id=" + id + ", title=" + title + ", authors=" + authors + "]";
	}
	
	
}



	<bean id="a1" class="com.empower.demo.Author">
		<property name="id" value="1" />
		<property name="name" value="Jagadeeswaran" />
	</bean>

	<bean id="a2" class="com.empower.demo.Author">
		<property name="id" value="2" />
		<property name="name" value="Dinesh" />
	</bean>

	<bean id="b1" class="com.empower.demo.Book">
		<property name="id" value="2001" />
		<property name="title" value="We can win" />
		<property name="authors">
			<list>
				<ref bean="a1"/>
				<ref bean="a2"/>
			</list>			
		</property>
	</bean>


---------------------------------------------------
Try this by yourself.

Identify how we can define a bean with
	List
	Set
	Map

Also, try with annotations instead of xml

------------------------------------
Spring Jdbc
-------------



DriverManagerDataSource ds=new DriverManagerDataSource();
    	ds.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
    	ds.setUsername("hr");
    	ds.setPassword("hr1");
//    	ds.setDriverClassName("");
    	
    	JdbcTemplate jt=new JdbcTemplate();
    	jt.setDataSource(ds);
    	
    try
    {
    	jt.execute("SELECT * FROM EMPLOYEES");
    }catch(Exception ex)
    {
    	System.out.println(ex);
    }

    	
    	System.out.println("Hello world");
    




there are 2 annotations 
	@Component
	@Bean



since JdbcTemplate is not our class,
we cannot modify the source code of this class

so we cannot use @Component


we use @Bean annotation in config class
