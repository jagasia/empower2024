JSTL
-----
	JSP Standard Tag Library

	JSTL libraries includes 
		core
		html
		sql

if you want to use core library:
	<%@taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

	<c:set var="x" value="20" />


core
	if
	forEach
	out

web.xml	
	deployment descriptor
	here only servlets were configured

MVC
	Model	
		any code that 
			defines data
			access data
	View
		any code that
			gets input
			gives output
	Controller
		is between model and view
		if controller is not there, then model can be accessed by view only if both are in same process (computer)
		by using controller, we are allowing views from anywhere in the world to access the model

Demo:
-------
product dao and impl
we use in our web application
where will you put the .jar files in web application?
	
1) create a dynamic web project
	04-sep-product-demo

2) since we use oracle database, we add ojdbc8.jar

	copy and paste this into WEB-INF/lib folder

3) model?
	model package contains code that either
		define data
		access data


in this project
	model package contains
		Product.java
		ProductDao.java
		ProductDaoImpl.java


the above 3 classes are copied to our project under
	src/main/java
		com.empower.demo.model

4) product.jsp


5) ProductServlet
	url:	product

Refer to:
https://github.com/jagasia/empower2024/tree/jag/Spring/04-sep-product-demo

-----------------------------
Task:
create a web application for Customer CRUD (ignore dob)
----------------------------------------------------------------------



Spring MVC
-------------
2 reasons for spring mvc from Servlet/ JSP
	1) Servlet is not a POJO class
		in spring mvc, we will create controller classes as POJO classes

	2) all URLs are received by the controller only		(no direct access to any page/ jsp)


Demo
-------
1) create a dynamic web project
		04-sep-spring-mvc-1

2) convert this into a maven project
	right click project
		configure
			convert to maven project
3) pom.xml
	add the following dependencies:

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.6</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>jakarta.servlet.jsp.jstl</artifactId>
			<version>3.0.1</version>
		</dependency>

4) Spring MVC framework provides a
	DispatcherServlet

we will be creating a servlet mapping in our web.xml
such that
all requests are received only by this dispatcher servlet.

based on the url, the servlet, will call the controller method accordingly

so the web.xml is going to be configured as following

org.springframework.web.servlet.DispatcherServlet
org.springframework.web.servlet.DispatcherServlet

----------------------------
---------------------------

Spring boot
	encourages "convention" over "configuration"
	provides starter dependencies
	internal tomcat server
	java application
	is above the layer of spring



